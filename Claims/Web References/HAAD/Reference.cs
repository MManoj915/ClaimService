//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace ClaimService.HAAD {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WebservicesSoap", Namespace="https://www.shafafiya.org/v2/")]
    public partial class Webservices : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback UploadTransactionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNewTransactionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback DownloadTransactionFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchTransactionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetTransactionDownloadedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPrescriptionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddDRGToEClaimOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckForNewPriorAuthorizationTransactionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNewPriorAuthorizationTransactionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDRGDetailsOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Webservices() {
            this.Url = global::ClaimService.Properties.Settings.Default.ClaimService_HAAD_Webservices;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event UploadTransactionCompletedEventHandler UploadTransactionCompleted;
        
        /// <remarks/>
        public event GetNewTransactionsCompletedEventHandler GetNewTransactionsCompleted;
        
        /// <remarks/>
        public event DownloadTransactionFileCompletedEventHandler DownloadTransactionFileCompleted;
        
        /// <remarks/>
        public event SearchTransactionsCompletedEventHandler SearchTransactionsCompleted;
        
        /// <remarks/>
        public event SetTransactionDownloadedCompletedEventHandler SetTransactionDownloadedCompleted;
        
        /// <remarks/>
        public event GetPrescriptionsCompletedEventHandler GetPrescriptionsCompleted;
        
        /// <remarks/>
        public event AddDRGToEClaimCompletedEventHandler AddDRGToEClaimCompleted;
        
        /// <remarks/>
        public event CheckForNewPriorAuthorizationTransactionsCompletedEventHandler CheckForNewPriorAuthorizationTransactionsCompleted;
        
        /// <remarks/>
        public event GetNewPriorAuthorizationTransactionsCompletedEventHandler GetNewPriorAuthorizationTransactionsCompleted;
        
        /// <remarks/>
        public event GetDRGDetailsCompletedEventHandler GetDRGDetailsCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.shafafiya.org/v2/UploadTransaction", RequestNamespace="https://www.shafafiya.org/v2/", ResponseNamespace="https://www.shafafiya.org/v2/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UploadTransaction(string login, string pwd, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] fileContent, string fileName, out string errorMessage, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] out byte[] errorReport) {
            object[] results = this.Invoke("UploadTransaction", new object[] {
                        login,
                        pwd,
                        fileContent,
                        fileName});
            errorMessage = ((string)(results[1]));
            errorReport = ((byte[])(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UploadTransactionAsync(string login, string pwd, byte[] fileContent, string fileName) {
            this.UploadTransactionAsync(login, pwd, fileContent, fileName, null);
        }
        
        /// <remarks/>
        public void UploadTransactionAsync(string login, string pwd, byte[] fileContent, string fileName, object userState) {
            if ((this.UploadTransactionOperationCompleted == null)) {
                this.UploadTransactionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadTransactionOperationCompleted);
            }
            this.InvokeAsync("UploadTransaction", new object[] {
                        login,
                        pwd,
                        fileContent,
                        fileName}, this.UploadTransactionOperationCompleted, userState);
        }
        
        private void OnUploadTransactionOperationCompleted(object arg) {
            if ((this.UploadTransactionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadTransactionCompleted(this, new UploadTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.shafafiya.org/v2/GetNewTransactions", RequestNamespace="https://www.shafafiya.org/v2/", ResponseNamespace="https://www.shafafiya.org/v2/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetNewTransactions(string login, string pwd, out string xmlTransactions, out string errorMessage) {
            object[] results = this.Invoke("GetNewTransactions", new object[] {
                        login,
                        pwd});
            xmlTransactions = ((string)(results[1]));
            errorMessage = ((string)(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetNewTransactionsAsync(string login, string pwd) {
            this.GetNewTransactionsAsync(login, pwd, null);
        }
        
        /// <remarks/>
        public void GetNewTransactionsAsync(string login, string pwd, object userState) {
            if ((this.GetNewTransactionsOperationCompleted == null)) {
                this.GetNewTransactionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNewTransactionsOperationCompleted);
            }
            this.InvokeAsync("GetNewTransactions", new object[] {
                        login,
                        pwd}, this.GetNewTransactionsOperationCompleted, userState);
        }
        
        private void OnGetNewTransactionsOperationCompleted(object arg) {
            if ((this.GetNewTransactionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNewTransactionsCompleted(this, new GetNewTransactionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.shafafiya.org/v2/DownloadTransactionFile", RequestNamespace="https://www.shafafiya.org/v2/", ResponseNamespace="https://www.shafafiya.org/v2/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int DownloadTransactionFile(string login, string pwd, string fileId, out string fileName, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] out byte[] file, out string errorMessage) {
            object[] results = this.Invoke("DownloadTransactionFile", new object[] {
                        login,
                        pwd,
                        fileId});
            fileName = ((string)(results[1]));
            file = ((byte[])(results[2]));
            errorMessage = ((string)(results[3]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DownloadTransactionFileAsync(string login, string pwd, string fileId) {
            this.DownloadTransactionFileAsync(login, pwd, fileId, null);
        }
        
        /// <remarks/>
        public void DownloadTransactionFileAsync(string login, string pwd, string fileId, object userState) {
            if ((this.DownloadTransactionFileOperationCompleted == null)) {
                this.DownloadTransactionFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadTransactionFileOperationCompleted);
            }
            this.InvokeAsync("DownloadTransactionFile", new object[] {
                        login,
                        pwd,
                        fileId}, this.DownloadTransactionFileOperationCompleted, userState);
        }
        
        private void OnDownloadTransactionFileOperationCompleted(object arg) {
            if ((this.DownloadTransactionFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadTransactionFileCompleted(this, new DownloadTransactionFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.shafafiya.org/v2/SearchTransactions", RequestNamespace="https://www.shafafiya.org/v2/", ResponseNamespace="https://www.shafafiya.org/v2/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SearchTransactions(string login, string pwd, int direction, string callerLicense, string ePartner, int transactionID, int transactionStatus, string transactionFileName, string transactionFromDate, string transactionToDate, int minRecordCount, int maxRecordCount, out string foundTransactions, out string errorMessage) {
            object[] results = this.Invoke("SearchTransactions", new object[] {
                        login,
                        pwd,
                        direction,
                        callerLicense,
                        ePartner,
                        transactionID,
                        transactionStatus,
                        transactionFileName,
                        transactionFromDate,
                        transactionToDate,
                        minRecordCount,
                        maxRecordCount});
            foundTransactions = ((string)(results[1]));
            errorMessage = ((string)(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SearchTransactionsAsync(string login, string pwd, int direction, string callerLicense, string ePartner, int transactionID, int transactionStatus, string transactionFileName, string transactionFromDate, string transactionToDate, int minRecordCount, int maxRecordCount) {
            this.SearchTransactionsAsync(login, pwd, direction, callerLicense, ePartner, transactionID, transactionStatus, transactionFileName, transactionFromDate, transactionToDate, minRecordCount, maxRecordCount, null);
        }
        
        /// <remarks/>
        public void SearchTransactionsAsync(string login, string pwd, int direction, string callerLicense, string ePartner, int transactionID, int transactionStatus, string transactionFileName, string transactionFromDate, string transactionToDate, int minRecordCount, int maxRecordCount, object userState) {
            if ((this.SearchTransactionsOperationCompleted == null)) {
                this.SearchTransactionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchTransactionsOperationCompleted);
            }
            this.InvokeAsync("SearchTransactions", new object[] {
                        login,
                        pwd,
                        direction,
                        callerLicense,
                        ePartner,
                        transactionID,
                        transactionStatus,
                        transactionFileName,
                        transactionFromDate,
                        transactionToDate,
                        minRecordCount,
                        maxRecordCount}, this.SearchTransactionsOperationCompleted, userState);
        }
        
        private void OnSearchTransactionsOperationCompleted(object arg) {
            if ((this.SearchTransactionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchTransactionsCompleted(this, new SearchTransactionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.shafafiya.org/v2/SetTransactionDownloaded", RequestNamespace="https://www.shafafiya.org/v2/", ResponseNamespace="https://www.shafafiya.org/v2/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SetTransactionDownloaded(string login, string pwd, string fileId, out string errorMessage) {
            object[] results = this.Invoke("SetTransactionDownloaded", new object[] {
                        login,
                        pwd,
                        fileId});
            errorMessage = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SetTransactionDownloadedAsync(string login, string pwd, string fileId) {
            this.SetTransactionDownloadedAsync(login, pwd, fileId, null);
        }
        
        /// <remarks/>
        public void SetTransactionDownloadedAsync(string login, string pwd, string fileId, object userState) {
            if ((this.SetTransactionDownloadedOperationCompleted == null)) {
                this.SetTransactionDownloadedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetTransactionDownloadedOperationCompleted);
            }
            this.InvokeAsync("SetTransactionDownloaded", new object[] {
                        login,
                        pwd,
                        fileId}, this.SetTransactionDownloadedOperationCompleted, userState);
        }
        
        private void OnSetTransactionDownloadedOperationCompleted(object arg) {
            if ((this.SetTransactionDownloadedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetTransactionDownloadedCompleted(this, new SetTransactionDownloadedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.shafafiya.org/v2/GetPrescriptions", RequestNamespace="https://www.shafafiya.org/v2/", ResponseNamespace="https://www.shafafiya.org/v2/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetPrescriptions(string login, string pwd, string payerID, string memberID, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] out byte[] prescription, out string errorMessage) {
            object[] results = this.Invoke("GetPrescriptions", new object[] {
                        login,
                        pwd,
                        payerID,
                        memberID});
            prescription = ((byte[])(results[1]));
            errorMessage = ((string)(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetPrescriptionsAsync(string login, string pwd, string payerID, string memberID) {
            this.GetPrescriptionsAsync(login, pwd, payerID, memberID, null);
        }
        
        /// <remarks/>
        public void GetPrescriptionsAsync(string login, string pwd, string payerID, string memberID, object userState) {
            if ((this.GetPrescriptionsOperationCompleted == null)) {
                this.GetPrescriptionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPrescriptionsOperationCompleted);
            }
            this.InvokeAsync("GetPrescriptions", new object[] {
                        login,
                        pwd,
                        payerID,
                        memberID}, this.GetPrescriptionsOperationCompleted, userState);
        }
        
        private void OnGetPrescriptionsOperationCompleted(object arg) {
            if ((this.GetPrescriptionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPrescriptionsCompleted(this, new GetPrescriptionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.shafafiya.org/v2/AddDRGToEClaim", RequestNamespace="https://www.shafafiya.org/v2/", ResponseNamespace="https://www.shafafiya.org/v2/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddDRGToEClaim(string login, string pwd, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] originalFileContent, string originalFileName, decimal baseRate, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] out byte[] drgFileContent, out string drgFileName, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] out byte[] auditFileContent, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] out byte[] reportFileContent, out string errorMessage, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] out byte[] errorReport) {
            object[] results = this.Invoke("AddDRGToEClaim", new object[] {
                        login,
                        pwd,
                        originalFileContent,
                        originalFileName,
                        baseRate});
            drgFileContent = ((byte[])(results[1]));
            drgFileName = ((string)(results[2]));
            auditFileContent = ((byte[])(results[3]));
            reportFileContent = ((byte[])(results[4]));
            errorMessage = ((string)(results[5]));
            errorReport = ((byte[])(results[6]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddDRGToEClaimAsync(string login, string pwd, byte[] originalFileContent, string originalFileName, decimal baseRate) {
            this.AddDRGToEClaimAsync(login, pwd, originalFileContent, originalFileName, baseRate, null);
        }
        
        /// <remarks/>
        public void AddDRGToEClaimAsync(string login, string pwd, byte[] originalFileContent, string originalFileName, decimal baseRate, object userState) {
            if ((this.AddDRGToEClaimOperationCompleted == null)) {
                this.AddDRGToEClaimOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddDRGToEClaimOperationCompleted);
            }
            this.InvokeAsync("AddDRGToEClaim", new object[] {
                        login,
                        pwd,
                        originalFileContent,
                        originalFileName,
                        baseRate}, this.AddDRGToEClaimOperationCompleted, userState);
        }
        
        private void OnAddDRGToEClaimOperationCompleted(object arg) {
            if ((this.AddDRGToEClaimCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddDRGToEClaimCompleted(this, new AddDRGToEClaimCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.shafafiya.org/v2/CheckForNewPriorAuthorizationTransactions", RequestNamespace="https://www.shafafiya.org/v2/", ResponseNamespace="https://www.shafafiya.org/v2/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CheckForNewPriorAuthorizationTransactions(string login, string pwd, out string errorMessage) {
            object[] results = this.Invoke("CheckForNewPriorAuthorizationTransactions", new object[] {
                        login,
                        pwd});
            errorMessage = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CheckForNewPriorAuthorizationTransactionsAsync(string login, string pwd) {
            this.CheckForNewPriorAuthorizationTransactionsAsync(login, pwd, null);
        }
        
        /// <remarks/>
        public void CheckForNewPriorAuthorizationTransactionsAsync(string login, string pwd, object userState) {
            if ((this.CheckForNewPriorAuthorizationTransactionsOperationCompleted == null)) {
                this.CheckForNewPriorAuthorizationTransactionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckForNewPriorAuthorizationTransactionsOperationCompleted);
            }
            this.InvokeAsync("CheckForNewPriorAuthorizationTransactions", new object[] {
                        login,
                        pwd}, this.CheckForNewPriorAuthorizationTransactionsOperationCompleted, userState);
        }
        
        private void OnCheckForNewPriorAuthorizationTransactionsOperationCompleted(object arg) {
            if ((this.CheckForNewPriorAuthorizationTransactionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckForNewPriorAuthorizationTransactionsCompleted(this, new CheckForNewPriorAuthorizationTransactionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.shafafiya.org/v2/GetNewPriorAuthorizationTransactions", RequestNamespace="https://www.shafafiya.org/v2/", ResponseNamespace="https://www.shafafiya.org/v2/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetNewPriorAuthorizationTransactions(string login, string pwd, out string foundTransactions, out string errorMessage) {
            object[] results = this.Invoke("GetNewPriorAuthorizationTransactions", new object[] {
                        login,
                        pwd});
            foundTransactions = ((string)(results[1]));
            errorMessage = ((string)(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetNewPriorAuthorizationTransactionsAsync(string login, string pwd) {
            this.GetNewPriorAuthorizationTransactionsAsync(login, pwd, null);
        }
        
        /// <remarks/>
        public void GetNewPriorAuthorizationTransactionsAsync(string login, string pwd, object userState) {
            if ((this.GetNewPriorAuthorizationTransactionsOperationCompleted == null)) {
                this.GetNewPriorAuthorizationTransactionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNewPriorAuthorizationTransactionsOperationCompleted);
            }
            this.InvokeAsync("GetNewPriorAuthorizationTransactions", new object[] {
                        login,
                        pwd}, this.GetNewPriorAuthorizationTransactionsOperationCompleted, userState);
        }
        
        private void OnGetNewPriorAuthorizationTransactionsOperationCompleted(object arg) {
            if ((this.GetNewPriorAuthorizationTransactionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNewPriorAuthorizationTransactionsCompleted(this, new GetNewPriorAuthorizationTransactionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.shafafiya.org/v2/GetDRGDetails", RequestNamespace="https://www.shafafiya.org/v2/", ResponseNamespace="https://www.shafafiya.org/v2/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetDRGDetails(string login, string pwd, string xmlClaimInput, out string xmlDRGDetails, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] out byte[] auditFileContent, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] out byte[] reportFileContent, out string errorMessage) {
            object[] results = this.Invoke("GetDRGDetails", new object[] {
                        login,
                        pwd,
                        xmlClaimInput});
            xmlDRGDetails = ((string)(results[1]));
            auditFileContent = ((byte[])(results[2]));
            reportFileContent = ((byte[])(results[3]));
            errorMessage = ((string)(results[4]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetDRGDetailsAsync(string login, string pwd, string xmlClaimInput) {
            this.GetDRGDetailsAsync(login, pwd, xmlClaimInput, null);
        }
        
        /// <remarks/>
        public void GetDRGDetailsAsync(string login, string pwd, string xmlClaimInput, object userState) {
            if ((this.GetDRGDetailsOperationCompleted == null)) {
                this.GetDRGDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDRGDetailsOperationCompleted);
            }
            this.InvokeAsync("GetDRGDetails", new object[] {
                        login,
                        pwd,
                        xmlClaimInput}, this.GetDRGDetailsOperationCompleted, userState);
        }
        
        private void OnGetDRGDetailsOperationCompleted(object arg) {
            if ((this.GetDRGDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDRGDetailsCompleted(this, new GetDRGDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void UploadTransactionCompletedEventHandler(object sender, UploadTransactionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadTransactionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadTransactionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public byte[] errorReport {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void GetNewTransactionsCompletedEventHandler(object sender, GetNewTransactionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNewTransactionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNewTransactionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string xmlTransactions {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string errorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void DownloadTransactionFileCompletedEventHandler(object sender, DownloadTransactionFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadTransactionFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DownloadTransactionFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string fileName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public byte[] file {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string errorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void SearchTransactionsCompletedEventHandler(object sender, SearchTransactionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchTransactionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchTransactionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string foundTransactions {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string errorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void SetTransactionDownloadedCompletedEventHandler(object sender, SetTransactionDownloadedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetTransactionDownloadedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetTransactionDownloadedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void GetPrescriptionsCompletedEventHandler(object sender, GetPrescriptionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPrescriptionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPrescriptionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public byte[] prescription {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string errorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void AddDRGToEClaimCompletedEventHandler(object sender, AddDRGToEClaimCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddDRGToEClaimCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddDRGToEClaimCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public byte[] drgFileContent {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string drgFileName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public byte[] auditFileContent {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[3]));
            }
        }
        
        /// <remarks/>
        public byte[] reportFileContent {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string errorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public byte[] errorReport {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[6]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void CheckForNewPriorAuthorizationTransactionsCompletedEventHandler(object sender, CheckForNewPriorAuthorizationTransactionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckForNewPriorAuthorizationTransactionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckForNewPriorAuthorizationTransactionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void GetNewPriorAuthorizationTransactionsCompletedEventHandler(object sender, GetNewPriorAuthorizationTransactionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNewPriorAuthorizationTransactionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNewPriorAuthorizationTransactionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string foundTransactions {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string errorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void GetDRGDetailsCompletedEventHandler(object sender, GetDRGDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDRGDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDRGDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string xmlDRGDetails {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public byte[] auditFileContent {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[2]));
            }
        }
        
        /// <remarks/>
        public byte[] reportFileContent {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string errorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
    }
}

#pragma warning restore 1591